{"version":3,"sources":["app_component/weather.component.jsx","app_component/form.component.jsx","App.js","serviceWorker.js","index.js"],"names":["Weather","props","className","city","weatherIcon","temp_celsius","min","max","minmaxTemp","temp_min","temp_max","description","Form","error","role","onSubmit","loadweather","type","name","autoComplete","placeholder","API_KEY","App","getWeather","e","a","preventDefault","target","elements","value","country","fetch","api_call","json","response","console","log","setState","sys","celsius","calCelsius","main","temp","weather","get_WeatherIcon","id","state","undefined","icon","Thunderstorm","Drizzle","Rain","Snow","Atmosphere","Clear","Clouds","Math","floor","icons","rangeID","this","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.d0d98e37.chunk.js","sourcesContent":["import React from 'react';\nimport \"./weather.style.css\";\n\nconst Weather = (props) => {\n\treturn (\n\t\t<div className=\"container text-light\">\n\t\t\t<div className=\"cards pt-4\">\n\t\t\t\t<h1>\n\t\t\t\t\t{props.city}\n\t\t\t\t</h1>\n\t\t\t\t<h5 className=\"py-4\">\n\t\t\t\t\t<i className={`wi ${props.weatherIcon} display-1`} />\n\t\t\t\t</h5>\n\t\t\t\t{/* <h1 className=\"py-2\">{props.temp_celsius}&deg;C</h1> */}\n\n\t\t\t\t{props.temp_celsius ? (<h1 className=\"py-2\">{props.temp_celsius}&deg;C</h1>) : null}\n\n\t\t\t\t{/** show max and min temperature */}\n\t\t\t\t{minmaxTemp(props.temp_min, props.temp_max)}\n\n\t\t\t\t<h4 className=\"py-3\">{props.description}</h4>\n\n\t\t\t</div>\n\t\t</div>\n\t);\n};\n\nfunction minmaxTemp(min, max) {\n\tif (min && max) {\n\t\treturn (\n\t\t<h3>\n\t\t\t<span className=\"px-4\">{min}&deg;C</span>\n\t\t\t<span className=\"px-4\">{max}&deg;C</span>\n\t\t</h3>\n\t\t)\n\t}\n}\n\nexport default Weather;","import React from 'react';\nimport \"./form.style.css\";\n\nconst Form = props => {\n\treturn (\n\t\t<div className='container h-100'>\n\t\t\t<div>{props.error ? error() : null }</div>\n\t\t\t<form onSubmit={props.loadweather}>\n\t\t\t\t<div className='row'>\n\t\t\t\t\t<div className='col-md-3 offset-md-2'>\n\t\t\t\t\t\t<input type=\"text\" className='form-control' name='city' autoComplete='off' placeholder=\"City\"/>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div className='col-md-3'>\n\t\t\t\t\t\t<input type=\"text\" className='form-control' name='country' autoComplete='off' placeholder=\"Country\"/>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div className='col-md-3 mt-md-0 mt-2 text-md-left'>\n\t\t\t\t\t\t<button className=\"btn btn-warning\">Get Weather</button>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</form>\n\t\t</div>\n\t);\n};\n\nfunction error() {\n\treturn (\n\t\t<div className=\"alert alert-danger mx-5\" role=\"alert\">\n\t\t\tPlease Enter City and Country\n\t\t</div>\t\n\t);\n}\n\nexport default Form;","import React from \"react\";\nimport \"./App.css\";\nimport Weather from \"./app_component/weather.component\";\nimport \"/Users/sriram/Documents/mytraining/reactProjects/weather-app/node_modules/weather-icons/css/weather-icons.min.css\";\nimport Form from \"./app_component/form.component\"\n// api call api.openweathermap.org/data/2.5/weather?q=London,uk\nconst API_KEY = \"36fae42211d8a37bf0d06701fe52c68c\";\n\nclass App extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      city: undefined,\n      country: undefined,\n      icon: undefined,\n      main: undefined,\n      celsius: undefined,\n      temp_max: undefined,\n      temp_min: undefined,\n      description: \"\",\n      error: false\n    };\n    // this.getWeather();\n\n    this.weatherIcon = {\n      Thunderstorm: \"wi-thunderstorm\",\n      Drizzle: \"wi-sleet\",\n      Rain: \"wi-storm-showers\",\n      Snow: \"wi-snow\",\n      Atmosphere: \"wi-fog\",\n      Clear: \"wi-day-sunny\",\n      Clouds: \"wi-day-fog\"\n    }\n  }\n\n  getWeather = async (e) => {\n\n    e.preventDefault();\n\n    const city = e.target.elements.city.value;\n    const country = e.target.elements.country.value;\n\n    if (city && country) {\n      const api_call = await fetch(`http://api.openweathermap.org/data/2.5/weather?q=${city},${country}&appid=${API_KEY}`);\n\n    const response = await api_call.json();\n\n    console.log(response);\n\n    this.setState({\n      city: `${ response.name }, ${ response.sys.country }`,\n      // country: response.sys.country,\n      celsius: this.calCelsius(response.main.temp),\n      temp_min: this.calCelsius(response.main.temp_min),\n      temp_max: this.calCelsius(response.main.temp_max),\n      description: response.weather[0].description,\n      // icon: this.weatherIcon.Thunderstorm\n    });\n    this.get_WeatherIcon(this.weatherIcon,response.weather[0].id);\n    } else {\n      this.setState({ error: true });\n    }\n  };\n\n  calCelsius(temp) {\n    let cell = Math.floor(temp - 273.15)\n    return cell;\n  }\n\n  get_WeatherIcon(icons,rangeID) {\n    switch (true) {\n        case rangeID >= 200 && rangeID <= 232:\n        this.setState({ icon: this.weatherIcon.Thunderstorm });\n        break;\n        case rangeID >= 300 && rangeID <= 321:\n        this.setState({ icon: this.weatherIcon.Drizzle });\n        break;\n        case rangeID >= 500 && rangeID <= 531:\n        this.setState({ icon: this.weatherIcon.Rain });\n        break;\n        case rangeID >= 600 && rangeID <= 622:\n        this.setState({ icon: this.weatherIcon.Snow });\n        break;\n        case rangeID >= 701 && rangeID <= 781:\n        this.setState({ icon: this.weatherIcon.Atmosphere });\n        break;\n        case rangeID = 800:\n        this.setState({ icon: this.weatherIcon.Clear });\n        break;\n        case rangeID >= 801 && rangeID <= 804:\n        this.setState({ icon: this.weatherIcon.Clouds });\n        break;\n        default:\n        this.setState({ icon: this.weatherIcon.Clouds });\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Form loadweather={this.getWeather} error={this.state.error}/>\n        <Weather\n          city={this.state.city}\n          country={this.state.country}\n          temp_celsius={this.state.celsius}\n          temp_min={this.state.temp_min}\n          temp_max={this.state.temp_max}\n          description={this.state.description}\n          weatherIcon={this.state.icon}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}